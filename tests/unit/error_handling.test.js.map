{"version":3,"file":"error_handling.test.js","sourceRoot":"","sources":["error_handling.test.ts"],"names":[],"mappings":"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","sourcesContent":["import { describe, expect, it } from 'vitest';\nimport { mkdtempSync, rmSync } from 'node:fs';\nimport { join } from 'node:path';\nimport { tmpdir } from 'node:os';\n\nimport { AssignmentService } from '../../src/services/assignment_service';\nimport { ArtifactService } from '../../src/services/artifact_service';\nimport { WorkflowRegistry } from '../../src/services/workflow_registry';\n\nconst schemaPath = join(\n  process.cwd(),\n  'specs',\n  '001-create-a-structured',\n  'contracts',\n  'handoff-artifact.schema.json',\n);\n\ndescribe('error handling', () => {\n  const makeDir = () => mkdtempSync(join(tmpdir(), 'error-service-'));\n\n  it('prevents duplicate attempt claims', async () => {\n    const artifactsDir = makeDir();\n    const service = new AssignmentService();\n\n    await service.claimAttempt({\n      attemptId: 'attempt-duplicate',\n      workItemId: 'work-item-1',\n      stepKey: 'phase-tests',\n      executor: { id: 'executor', displayName: 'Executor' },\n      claimedAt: new Date(),\n      artifactsDir,\n    });\n\n    await expect(\n      service.claimAttempt({\n        attemptId: 'attempt-duplicate',\n        workItemId: 'work-item-1',\n        stepKey: 'phase-tests',\n        executor: { id: 'executor-2', displayName: 'Executor Two' },\n        claimedAt: new Date(),\n        artifactsDir,\n      }),\n    ).rejects.toThrow(/already claimed/i);\n\n    rmSync(artifactsDir, { recursive: true, force: true });\n  });\n\n  it('throws when handoff artifacts invalid', async () => {\n    const artifactsDir = makeDir();\n    const service = new ArtifactService({ artifactsDir, schemaPath });\n\n    await expect(\n      service.writeHandoffArtifact({\n        workItemId: 'item-1',\n        workflow: { name: 'Sample', version: '1.0.0' },\n        step: { key: 'phase-tests', order: 2 },\n        eventType: 'attempt-completed',\n        attemptId: 'attempt-1',\n        actor: 'actor',\n        outcome: 'done',\n        nextAction: 'next',\n        baselineIntegration: 'pre',\n        links: [],\n        timestamp: new Date('invalid'),\n      }),\n    ).rejects.toThrow(/invalid/i);\n\n    rmSync(artifactsDir, { recursive: true, force: true });\n  });\n\n  it('throws when workflow missing', async () => {\n    const registry = new WorkflowRegistry({ workflowsDir: makeDir() });\n    await expect(registry.getWorkflow('missing')).rejects.toThrow(/not found/i);\n  });\n});\n"]}