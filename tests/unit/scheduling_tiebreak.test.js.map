{"version":3,"file":"scheduling_tiebreak.test.js","sourceRoot":"","sources":["scheduling_tiebreak.test.ts"],"names":[],"mappings":";;AAAA,mCAA8C;AAE9C,8EAA0E;AAE1E,IAAA,iBAAQ,EAAC,yBAAyB,EAAE,GAAG,EAAE;IACvC,IAAA,WAAE,EAAC,wCAAwC,EAAE,KAAK,IAAI,EAAE;QACtD,MAAM,OAAO,GAAG,IAAI,sCAAiB,EAAE,CAAC;QACxC,MAAM,QAAQ,GAAG;YACf,EAAE,EAAE,YAAY;YAChB,IAAI,EAAE,wBAAwB;YAC9B,OAAO,EAAE,OAAO;YAChB,KAAK,EAAE;gBACL;oBACE,GAAG,EAAE,YAAY;oBACjB,KAAK,EAAE,CAAC;oBACR,cAAc,EAAE,KAAK;oBACrB,aAAa,EAAE,EAAE;oBACjB,YAAY,EAAE,CAAC,MAAM,CAAC;oBACtB,eAAe,EAAE,SAAS;iBAC3B;gBACD;oBACE,GAAG,EAAE,MAAM;oBACX,KAAK,EAAE,CAAC;oBACR,cAAc,EAAE,IAAI;oBACpB,aAAa,EAAE,EAAE;oBACjB,YAAY,EAAE,CAAC,MAAM,CAAC;oBACtB,eAAe,EAAE,UAAU;iBAC5B;gBACD;oBACE,GAAG,EAAE,OAAO;oBACZ,KAAK,EAAE,CAAC;oBACR,cAAc,EAAE,IAAI;oBACpB,aAAa,EAAE,EAAE;oBACjB,YAAY,EAAE,CAAC,MAAM,CAAC;oBACtB,eAAe,EAAE,UAAU;iBAC5B;gBACD;oBACE,GAAG,EAAE,OAAO;oBACZ,KAAK,EAAE,CAAC;oBACR,cAAc,EAAE,IAAI;oBACpB,aAAa,EAAE,EAAE;oBACjB,YAAY,EAAE,CAAC,MAAM,CAAC;oBACtB,eAAe,EAAE,UAAU;iBAC5B;aACF;SACF,CAAC;QAEF,MAAM,QAAQ,GAAG,MAAM,OAAO,CAAC,gBAAgB,CAAC;YAC9C,QAAQ;YACR,QAAQ,EAAE,EAAE,EAAE,EAAE,mBAAmB,EAAE,cAAc,EAAE,YAAY,EAAE;YACnE,cAAc,EAAE,CAAC,YAAY,CAAC;SAC/B,CAAC,CAAC;QAEH,IAAA,eAAM,EAAC,QAAQ,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC,IAAI,EAAE,EAAE,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,OAAO,EAAE,MAAM,EAAE,OAAO,CAAC,CAAC,CAAC;IAC1F,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["import { describe, expect, it } from 'vitest';\n\nimport { SchedulingService } from '../../src/services/scheduling_service';\n\ndescribe('scheduling tie-breakers', () => {\n  it('sorts equal-order steps by lexical key', async () => {\n    const service = new SchedulingService();\n    const workflow = {\n      id: 'wf-lexical',\n      name: 'Lexical Order Workflow',\n      version: '1.0.0',\n      steps: [\n        {\n          key: 'step-start',\n          order: 1,\n          parallelizable: false,\n          entryCriteria: [],\n          exitCriteria: ['done'],\n          responsibleRole: 'planner',\n        },\n        {\n          key: 'beta',\n          order: 2,\n          parallelizable: true,\n          entryCriteria: [],\n          exitCriteria: ['done'],\n          responsibleRole: 'executor',\n        },\n        {\n          key: 'alpha',\n          order: 2,\n          parallelizable: true,\n          entryCriteria: [],\n          exitCriteria: ['done'],\n          responsibleRole: 'executor',\n        },\n        {\n          key: 'gamma',\n          order: 2,\n          parallelizable: true,\n          entryCriteria: [],\n          exitCriteria: ['done'],\n          responsibleRole: 'executor',\n        },\n      ],\n    };\n\n    const decision = await service.generateSchedule({\n      workflow,\n      workItem: { id: 'work-item-lexical', currentStepKey: 'step-start' },\n      completedSteps: ['step-start'],\n    });\n\n    expect(decision.readySteps.map((step) => step.key)).toEqual(['alpha', 'beta', 'gamma']);\n  });\n});\n"]}