{"version":3,"file":"cli-cancel.spec.js","sourceRoot":"","sources":["cli-cancel.spec.ts"],"names":[],"mappings":"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","sourcesContent":["import { afterEach, beforeEach, describe, expect, it, vi } from 'vitest';\nimport { mkdtempSync, mkdirSync, readFileSync, rmSync, writeFileSync } from 'node:fs';\nimport { tmpdir } from 'node:os';\nimport { join } from 'node:path';\nimport type { AnySchema } from 'ajv';\nimport { expectExitCode, expectJsonSchema, parseJson, runCliCommand } from './cli-delegate.spec';\n\ntype SessionRecord = {\n  id: string;\n  status: string;\n  createdAt: string;\n  updatedAt: string;\n  needsUserInput: boolean;\n  repository?: {\n    owner: string;\n    repo: string;\n    branch: string;\n    remoteUrl: string;\n  };\n};\n\nconst cancelResponseSchema: AnySchema = {\n  type: 'object',\n  required: ['id', 'status'],\n  additionalProperties: false,\n  properties: {\n    id: { type: 'string', minLength: 1 },\n    status: {\n      type: 'string',\n      enum: ['cancelled'],\n    },\n  },\n};\n\nvi.setConfig({ testTimeout: 40000, hookTimeout: 40000 });\n\ndescribe('cli cancel contract', () => {\n  let agentHome: string;\n  let workspace: string;\n  let baseEnv: NodeJS.ProcessEnv;\n\n  beforeEach(async () => {\n    agentHome = mkdtempSync(join(tmpdir(), 'cli-cancel-'));\n    workspace = join(agentHome, 'workspace');\n    mkdirSync(workspace, { recursive: true });\n    baseEnv = {\n      COPILOT_AGENT_HOME: agentHome,\n      COPILOT_CLI_TEST_MODE: 'contract',\n    };\n\n    const login = await runCliCommand(['login', '--method', 'device-code', '--json'], {\n      env: baseEnv,\n      cwd: workspace,\n    });\n    expectExitCode(login, 0);\n  });\n\n  afterEach(() => {\n    rmSync(agentHome, { recursive: true, force: true });\n  });\n\n  it('cancels a running session and returns updated state', async () => {\n    const delegated = await runCliCommand(\n      ['delegate', '--prompt', 'need cancel', '--json'],\n      { env: baseEnv, cwd: workspace }\n    );\n    expectExitCode(delegated, 0);\n    const { id } = parseJson<{ id: string }>(delegated.stdout);\n\n    const storePath = join(agentHome, 'sessions.json');\n    const sessions = JSON.parse(readFileSync(storePath, 'utf8')) as SessionRecord[];\n    const record = sessions.find((session) => session.id === id);\n    if (record) {\n      record.status = 'running';\n      record.updatedAt = new Date().toISOString();\n    }\n    writeFileSync(storePath, JSON.stringify(sessions, null, 2));\n\n    const cancel = await runCliCommand(['cancel', id, '--json'], {\n      env: baseEnv,\n      cwd: workspace,\n    });\n\n    expectExitCode(cancel, 0);\n    const payload = parseJson(cancel.stdout);\n    expectJsonSchema(payload, cancelResponseSchema);\n  });\n\n  it('is idempotent for already cancelled sessions', async () => {\n    const delegated = await runCliCommand(\n      ['delegate', '--prompt', 'cancel twice', '--json'],\n      { env: baseEnv, cwd: workspace }\n    );\n    expectExitCode(delegated, 0);\n    const { id } = parseJson<{ id: string }>(delegated.stdout);\n\n    const cancel = await runCliCommand(['cancel', id, '--json'], {\n      env: baseEnv,\n      cwd: workspace,\n    });\n    expectExitCode(cancel, 0);\n\n    const second = await runCliCommand(['cancel', id, '--json'], {\n      env: baseEnv,\n      cwd: workspace,\n    });\n    expectExitCode(second, 0);\n    const payload = parseJson(second.stdout);\n    expect(payload.status).toBe('cancelled');\n  });\n\n  it('exits with conflict when session already completed', async () => {\n    const delegated = await runCliCommand(\n      ['delegate', '--prompt', 'already done', '--json'],\n      { env: baseEnv, cwd: workspace }\n    );\n    expectExitCode(delegated, 0);\n    const { id } = parseJson<{ id: string }>(delegated.stdout);\n\n    const storePath = join(agentHome, 'sessions.json');\n    const sessions = JSON.parse(readFileSync(storePath, 'utf8')) as SessionRecord[];\n    const record = sessions.find((session) => session.id === id);\n    if (record) {\n      record.status = 'completed';\n      record.updatedAt = new Date().toISOString();\n    }\n    writeFileSync(storePath, JSON.stringify(sessions, null, 2));\n\n    const cancel = await runCliCommand(['cancel', id, '--json'], {\n      env: baseEnv,\n      cwd: workspace,\n    });\n\n    expectExitCode(cancel, 6);\n    expect(cancel.stderr).toContain('completed');\n  });\n});\n"]}