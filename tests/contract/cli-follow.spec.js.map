{"version":3,"file":"cli-follow.spec.js","sourceRoot":"","sources":["cli-follow.spec.ts"],"names":[],"mappings":"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","sourcesContent":["import { afterEach, beforeEach, describe, expect, it, vi } from 'vitest';\nimport { mkdtempSync, mkdirSync, readFileSync, rmSync, writeFileSync } from 'node:fs';\nimport { tmpdir } from 'node:os';\nimport { join } from 'node:path';\nimport { once } from 'node:events';\nimport { expectExitCode, parseJson, runCliCommand, spawnCliProcess } from './cli-delegate.spec';\n\ntype SessionRecord = {\n  id: string;\n  status: string;\n  createdAt: string;\n  updatedAt: string;\n  needsUserInput: boolean;\n  events?: Array<{\n    type: string;\n    status?: string;\n    message?: string;\n    timestamp: string;\n  }>;\n  repository?: {\n    owner: string;\n    repo: string;\n    branch: string;\n    remoteUrl: string;\n  };\n};\n\nvi.setConfig({ testTimeout: 40000, hookTimeout: 40000 });\n\ndescribe('cli follow contract', () => {\n  let agentHome: string;\n  let workspace: string;\n  let baseEnv: NodeJS.ProcessEnv;\n\n  beforeEach(async () => {\n    agentHome = mkdtempSync(join(tmpdir(), 'cli-follow-'));\n    workspace = join(agentHome, 'workspace');\n    mkdirSync(workspace, { recursive: true });\n    baseEnv = {\n      COPILOT_AGENT_HOME: agentHome,\n      COPILOT_CLI_TEST_MODE: 'contract',\n    };\n\n    const login = await runCliCommand(['login', '--method', 'device-code', '--json'], {\n      env: baseEnv,\n      cwd: workspace,\n    });\n    expectExitCode(login, 0);\n  });\n\n  afterEach(() => {\n    rmSync(agentHome, { recursive: true, force: true });\n  });\n\n  it('streams line-delimited json events until completion', async () => {\n    const delegated = await runCliCommand(\n      ['delegate', '--prompt', 'stream events', '--json'],\n      { env: baseEnv, cwd: workspace }\n    );\n    expectExitCode(delegated, 0);\n    const { id } = parseJson<{ id: string }>(delegated.stdout);\n\n    const storePath = join(agentHome, 'sessions.json');\n    const sessions = JSON.parse(readFileSync(storePath, 'utf8')) as SessionRecord[];\n    const record = sessions.find((session) => session.id === id);\n    expect(record).toBeDefined();\n    if (record) {\n      record.events = [\n        {\n          type: 'status',\n          status: 'queued',\n          timestamp: new Date().toISOString(),\n        },\n        {\n          type: 'log',\n          message: 'Agent is analyzing the request',\n          timestamp: new Date().toISOString(),\n        },\n        {\n          type: 'status',\n          status: 'completed',\n          timestamp: new Date().toISOString(),\n        },\n      ];\n      record.status = 'completed';\n      record.updatedAt = new Date().toISOString();\n    }\n    writeFileSync(storePath, JSON.stringify(sessions, null, 2));\n\n    const follow = await runCliCommand(['follow', id, '--json'], {\n      env: baseEnv,\n      cwd: workspace,\n    });\n\n    expectExitCode(follow, 0);\n    const lines = follow.stdout\n      .trim()\n      .split('\\n')\n      .map((line) => line.trim())\n      .filter(Boolean);\n    expect(lines.length).toBeGreaterThan(1);\n    const last = parseJson(lines[lines.length - 1]);\n    expect(last.status).toBe('completed');\n  });\n\n  it('gracefully exits on interrupt while streaming', async () => {\n    const delegated = await runCliCommand(\n      ['delegate', '--prompt', 'long stream', '--json'],\n      { env: baseEnv, cwd: workspace }\n    );\n    expectExitCode(delegated, 0);\n    const { id } = parseJson<{ id: string }>(delegated.stdout);\n\n    const child = spawnCliProcess(['follow', id, '--json'], {\n      env: {\n        ...baseEnv,\n        COPILOT_CLI_TEST_FOLLOW_DELAY_MS: '2000',\n      },\n      cwd: workspace,\n    });\n\n    const chunks: string[] = [];\n    child.stdout?.setEncoding('utf8');\n    child.stdout?.on('data', (chunk: string) => {\n      chunks.push(chunk);\n    });\n\n    await once(child.stdout!, 'data');\n    child.kill('SIGINT');\n\n    const [code] = (await once(child, 'exit')) as [number | null, NodeJS.Signals | null];\n    expect(code === null ? 0 : code).toBe(0);\n\n    const combined = chunks.join('');\n    const firstLine = combined.trim().split('\\n')[0];\n    expect(() => parseJson(firstLine)).not.toThrow();\n  });\n});\n"]}