{"version":3,"file":"cli-runner.spec.js","sourceRoot":"","sources":["cli-runner.spec.ts"],"names":[],"mappings":"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","sourcesContent":["import { afterEach, beforeAll, beforeEach, describe, expect, it, vi } from 'vitest';\nimport { mkdtempSync, mkdirSync, rmSync } from 'node:fs';\nimport { chmod } from 'node:fs/promises';\nimport { tmpdir } from 'node:os';\nimport { dirname, join, resolve } from 'node:path';\nimport { fileURLToPath } from 'node:url';\nimport { expectExitCode, parseJson, runCliCommand } from './cli-delegate.spec';\n\nconst __filename = fileURLToPath(import.meta.url);\nconst __dirname = dirname(__filename);\nconst cliScript = resolve(__dirname, '../../tools/remote-agent-cli/remote-agent-cli.js');\n\nvi.setConfig({ testTimeout: 40000, hookTimeout: 40000 });\n\nasync function waitForStatus(env: NodeJS.ProcessEnv, cwd: string, id: string, expected: string, attempts = 20, delayMs = 200) {\n  for (let attempt = 0; attempt < attempts; attempt += 1) {\n    const statusResult = await runCliCommand(['status', id, '--json'], { env, cwd });\n    if (statusResult.exitCode === 0) {\n      const payload = parseJson<{ status: string }>(statusResult.stdout);\n      if (payload.status === expected) {\n        return payload;\n      }\n    }\n    await new Promise((resolveDelay) => setTimeout(resolveDelay, delayMs));\n  }\n  throw new Error(`Session ${id} did not reach status ${expected} within timeout.`);\n}\n\ndescribe('cli runner integration', () => {\n  let agentHome: string;\n  let workspace: string;\n  let baseEnv: NodeJS.ProcessEnv;\n\n  beforeAll(async () => {\n    await chmod(cliScript, 0o755); // ensure executable bit for spawned runs\n  });\n\n  beforeEach(async () => {\n    agentHome = mkdtempSync(join(tmpdir(), 'cli-runner-'));\n    workspace = join(agentHome, 'workspace');\n    mkdirSync(workspace, { recursive: true });\n    baseEnv = {\n      COPILOT_AGENT_HOME: agentHome,\n      COPILOT_CLI_TEST_MODE: 'contract',\n      COPILOT_AGENT_RUNNER_MODE: 'cli',\n      COPILOT_AGENT_CLI_PATH: cliScript,\n    };\n\n    const login = await runCliCommand(['login', '--method', 'device-code', '--json'], {\n      env: baseEnv,\n      cwd: workspace,\n    });\n    expectExitCode(login, 0);\n  });\n\n  afterEach(() => {\n    rmSync(agentHome, { recursive: true, force: true });\n  });\n\n  it('executes external job runner and completes session', async () => {\n    const delegate = await runCliCommand(\n      ['delegate', '--prompt', 'Generate hello world function', '--json'],\n      { env: baseEnv, cwd: workspace }\n    );\n    expectExitCode(delegate, 0);\n    const { id } = parseJson<{ id: string }>(delegate.stdout);\n\n    const payload = await waitForStatus(baseEnv, workspace, id, 'completed');\n    expect(payload.status).toBe('completed');\n\n    const result = await runCliCommand(['result', id, '--json'], { env: baseEnv, cwd: workspace });\n    expectExitCode(result, 0);\n    const resultPayload = parseJson<{ summary: string }>(result.stdout);\n    expect(resultPayload.summary).toContain('Remote Agent CLI');\n\n    const follow = await runCliCommand(['follow', id, '--json'], { env: baseEnv, cwd: workspace });\n    expectExitCode(follow, 0);\n    const followLines = follow.stdout.trim().split('\\n').filter(Boolean);\n    expect(followLines.length).toBeGreaterThan(1);\n  });\n});\n"]}