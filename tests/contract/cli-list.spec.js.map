{"version":3,"file":"cli-list.spec.js","sourceRoot":"","sources":["cli-list.spec.ts"],"names":[],"mappings":"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","sourcesContent":["import { afterEach, beforeEach, describe, expect, it, vi } from 'vitest';\nimport { mkdtempSync, mkdirSync, readFileSync, rmSync, writeFileSync } from 'node:fs';\nimport { tmpdir } from 'node:os';\nimport { join } from 'node:path';\nimport type { AnySchema } from 'ajv';\nimport { expectExitCode, expectJsonSchema, parseJson, runCliCommand } from './cli-delegate.spec';\n\ntype SessionRecord = {\n  id: string;\n  status: string;\n  createdAt: string;\n  updatedAt: string;\n  needsUserInput: boolean;\n  repository?: {\n    owner: string;\n    repo: string;\n    branch: string;\n    remoteUrl: string;\n  };\n};\n\nconst listResponseSchema: AnySchema = {\n  type: 'object',\n  required: ['sessions'],\n  additionalProperties: false,\n  properties: {\n    sessions: {\n      type: 'array',\n      items: {\n        type: 'object',\n        required: ['id', 'status', 'updatedAt'],\n        additionalProperties: false,\n        properties: {\n          id: { type: 'string', minLength: 1 },\n          status: {\n            type: 'string',\n            enum: ['queued', 'running', 'waiting', 'blocked', 'completed', 'failed', 'cancelled'],\n          },\n          updatedAt: { type: 'string', format: 'date-time' },\n        },\n      },\n    },\n  },\n};\n\nvi.setConfig({ testTimeout: 40000, hookTimeout: 40000 });\n\ndescribe('cli list contract', () => {\n  let agentHome: string;\n  let workspace: string;\n  let baseEnv: NodeJS.ProcessEnv;\n\n  beforeEach(async () => {\n    agentHome = mkdtempSync(join(tmpdir(), 'cli-list-'));\n    workspace = join(agentHome, 'workspace');\n    mkdirSync(workspace, { recursive: true });\n    baseEnv = {\n      COPILOT_AGENT_HOME: agentHome,\n      COPILOT_CLI_TEST_MODE: 'contract',\n    };\n\n    const login = await runCliCommand(['login', '--method', 'device-code', '--json'], {\n      env: baseEnv,\n      cwd: workspace,\n    });\n    expectExitCode(login, 0);\n  });\n\n  afterEach(() => {\n    rmSync(agentHome, { recursive: true, force: true });\n  });\n\n  it('lists all sessions with schema compliance', async () => {\n    const ids: string[] = [];\n    for (let i = 0; i < 3; i += 1) {\n      const result = await runCliCommand(\n        ['delegate', '--prompt', `session-${i}`, '--json'],\n        { env: baseEnv, cwd: workspace }\n      );\n      expectExitCode(result, 0);\n      ids.push(parseJson<{ id: string }>(result.stdout).id);\n    }\n\n    const response = await runCliCommand(['list', '--json'], {\n      env: baseEnv,\n      cwd: workspace,\n    });\n\n    expectExitCode(response, 0);\n    const payload = parseJson(response.stdout);\n    expectJsonSchema(payload, listResponseSchema);\n    const sessionIds = payload.sessions.map((session: SessionRecord) => session.id);\n    ids.forEach((id) => expect(sessionIds).toContain(id));\n  });\n\n  it('filters sessions by status', async () => {\n    const completedResult = await runCliCommand(\n      ['delegate', '--prompt', 'completed session', '--json'],\n      { env: baseEnv, cwd: workspace }\n    );\n    expectExitCode(completedResult, 0);\n    const completedId = parseJson<{ id: string }>(completedResult.stdout).id;\n\n    const queuedResult = await runCliCommand(\n      ['delegate', '--prompt', 'queued session', '--json'],\n      { env: baseEnv, cwd: workspace }\n    );\n    expectExitCode(queuedResult, 0);\n\n    const storePath = join(agentHome, 'sessions.json');\n    const sessions = JSON.parse(readFileSync(storePath, 'utf8')) as SessionRecord[];\n    const record = sessions.find((session) => session.id === completedId);\n    if (record) {\n      record.status = 'completed';\n      record.updatedAt = new Date().toISOString();\n    }\n    writeFileSync(storePath, JSON.stringify(sessions, null, 2));\n\n    const response = await runCliCommand(['list', '--status', 'completed', '--json'], {\n      env: baseEnv,\n      cwd: workspace,\n    });\n\n    expectExitCode(response, 0);\n    const payload = parseJson(response.stdout);\n    expectJsonSchema(payload, listResponseSchema);\n    expect(payload.sessions.length).toBe(1);\n    expect(payload.sessions[0].id).toBe(completedId);\n  });\n});\n"]}