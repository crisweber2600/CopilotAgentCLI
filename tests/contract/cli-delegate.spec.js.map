{"version":3,"file":"cli-delegate.spec.js","sourceRoot":"","sources":["cli-delegate.spec.ts"],"names":[],"mappings":"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","sourcesContent":["import { afterEach, beforeEach, describe, expect, it, vi } from 'vitest';\nimport { spawn } from 'node:child_process';\nimport { once } from 'node:events';\nimport { dirname, join, resolve } from 'node:path';\nimport { fileURLToPath } from 'node:url';\nimport type { ChildProcess } from 'node:child_process';\nimport Ajv, { type AnySchema } from 'ajv';\nimport { mkdtempSync, mkdirSync, rmSync, writeFileSync, readFileSync } from 'node:fs';\nimport { tmpdir } from 'node:os';\n\nexport interface CliResult {\n  readonly args: readonly string[];\n  readonly stdout: string;\n  readonly stderr: string;\n  readonly exitCode: number;\n  readonly signal: NodeJS.Signals | null;\n}\n\nexport interface CliRunOptions {\n  env?: NodeJS.ProcessEnv;\n  input?: string;\n  timeoutMs?: number;\n  cwd?: string;\n}\n\nconst __filename = fileURLToPath(import.meta.url);\nconst __dirname = dirname(__filename);\nconst CLI_ENTRY = resolve(__dirname, '../../src/cli/index.ts');\nconst TSX_ENTRY = resolve(__dirname, '../../node_modules/tsx/dist/cli.cjs');\nconst ajv = new Ajv({ allErrors: true, strict: false });\n\nvi.setConfig({ testTimeout: 40000, hookTimeout: 40000 });\n\nfunction collectStream(child: ChildProcess): Promise<{ stdout: string; stderr: string }> {\n  return new Promise((resolve, reject) => {\n    let stdout = '';\n    let stderr = '';\n\n    if (!child.stdout || !child.stderr) {\n      reject(new Error('CLI spawn did not provide stdout/stderr streams'));\n      return;\n    }\n\n    child.stdout.setEncoding('utf8');\n    child.stderr.setEncoding('utf8');\n\n    child.stdout.on('data', (chunk: string) => {\n      stdout += chunk;\n    });\n\n    child.stderr.on('data', (chunk: string) => {\n      stderr += chunk;\n    });\n\n    child.once('error', reject);\n    child.once('close', () => resolve({ stdout, stderr }));\n  });\n}\n\nexport function spawnCliProcess(args: readonly string[], options: CliRunOptions = {}): ChildProcess {\n  const { env, cwd } = options;\n  return spawn(process.execPath, [TSX_ENTRY, CLI_ENTRY, ...args], {\n    cwd: cwd ?? resolve(__dirname, '../../'),\n    env: { ...process.env, ...env },\n    stdio: ['pipe', 'pipe', 'pipe'],\n  });\n}\n\nexport async function runCliCommand(\n  args: readonly string[],\n  options: CliRunOptions = {}\n): Promise<CliResult> {\n  const { input, timeoutMs = 30000 } = options;\n  const child = spawnCliProcess(args, options);\n\n  if (input) {\n    child.stdin?.write(input);\n    child.stdin?.end();\n  }\n\n  const timeout = timeoutMs > 0 ? setTimeout(() => {\n    child.kill('SIGKILL');\n  }, timeoutMs) : null;\n\n  const [streams, exitTuple] = await Promise.all([\n    collectStream(child),\n    once(child, 'exit') as Promise<[number | null, NodeJS.Signals | null]>,\n  ]);\n\n  if (timeout) {\n    clearTimeout(timeout);\n  }\n\n  const [code, signal] = exitTuple;\n  const exit = typeof code === 'number' ? code : child.exitCode;\n  return {\n    args,\n    stdout: streams.stdout,\n    stderr: streams.stderr,\n    exitCode: typeof exit === 'number' ? exit : 1,\n    signal: signal ?? child.signalCode,\n  };\n}\n\nexport function expectExitCode(result: CliResult, expected: number) {\n  expect(result.exitCode, `Expected exit code ${expected}, received ${result.exitCode}. stderr: ${result.stderr}`).toBe(expected);\n}\n\nexport function expectJsonSchema<T>(payload: unknown, schema: AnySchema): asserts payload is T {\n  const validate = ajv.compile(schema);\n  const valid = validate(payload);\n  if (!valid) {\n    const message = ajv.errorsText(validate.errors, { separator: '\\n' });\n    throw new Error(`JSON schema assertion failed:\\n${message}`);\n  }\n}\n\nexport function parseJson<T = unknown>(stdout: string): T {\n  const trimmed = stdout.trim();\n  if (!trimmed) {\n    throw new Error('Expected stdout to contain JSON payload, received empty output');\n  }\n  try {\n    return JSON.parse(trimmed) as T;\n  } catch (error) {\n    throw new Error(`Failed to parse JSON from stdout: ${(error as Error).message}\\nOutput: ${trimmed}`);\n  }\n}\n\nconst delegateResponseSchema: AnySchema = {\n  type: 'object',\n  required: ['id', 'status', 'createdAt'],\n  additionalProperties: false,\n  properties: {\n    id: { type: 'string', minLength: 1 },\n    status: {\n      type: 'string',\n      enum: ['queued', 'running', 'waiting', 'blocked', 'completed', 'failed', 'cancelled'],\n    },\n    createdAt: { type: 'string', format: 'date-time' },\n  },\n};\n\ndescribe('cli delegate contract', () => {\n  let agentHome: string;\n  let workspace: string;\n  let baseEnv: NodeJS.ProcessEnv;\n\n  beforeEach(async () => {\n    agentHome = mkdtempSync(join(tmpdir(), 'cli-delegate-'));\n    workspace = join(agentHome, 'workspace');\n    mkdirSync(workspace, { recursive: true });\n    baseEnv = {\n      COPILOT_AGENT_HOME: agentHome,\n      COPILOT_CLI_TEST_MODE: 'contract',\n    };\n\n    const login = await runCliCommand(['login', '--method', 'device-code', '--json'], {\n      env: baseEnv,\n      cwd: workspace,\n    });\n    expectExitCode(login, 0);\n  });\n\n  afterEach(() => {\n    rmSync(agentHome, { recursive: true, force: true });\n  });\n\n  it('requires a prompt', async () => {\n    const result = await runCliCommand(['delegate', '--json'], {\n      env: baseEnv,\n      cwd: workspace,\n    });\n\n    expectExitCode(result, 2);\n    expect(result.stderr).toContain('prompt');\n  });\n\n  it('enqueues a delegation request with JSON output', async () => {\n    const prompt = 'Refactor the authentication module';\n    const filePath = join(workspace, 'auth.ts');\n    writeFileSync(filePath, 'export const stub = true;');\n\n    const result = await runCliCommand(\n      ['delegate', '--prompt', prompt, '--file', filePath, '--json'],\n      {\n        env: baseEnv,\n        cwd: workspace,\n      }\n    );\n\n    expectExitCode(result, 0);\n    const payload = parseJson(result.stdout);\n    expectJsonSchema(payload, delegateResponseSchema);\n    expect(payload.status).toBe('queued');\n  });\n\n  it('fails when referenced files do not exist', async () => {\n    const result = await runCliCommand(\n      ['delegate', '--prompt', 'do something', '--file', 'missing.txt', '--json'],\n      {\n        env: baseEnv,\n        cwd: workspace,\n      }\n    );\n\n    expectExitCode(result, 2);\n    expect(result.stderr).toContain('missing.txt');\n  });\n\n  it('supports quiet mode outputting only the session id', async () => {\n    const prompt = 'Implement feature flag toggle';\n    const result = await runCliCommand(\n      ['delegate', '--prompt', prompt, '--quiet'],\n      {\n        env: baseEnv,\n        cwd: workspace,\n      }\n    );\n\n    expectExitCode(result, 0);\n    const trimmed = result.stdout.trim();\n    expect(trimmed.length).toBeGreaterThan(0);\n    expect(trimmed.split('\\n').length).toBe(1);\n  });\n\n  it('validates folder references', async () => {\n    const contextFolder = join(workspace, 'context');\n    mkdirSync(contextFolder);\n    writeFileSync(join(contextFolder, 'README.md'), '# context');\n\n    const result = await runCliCommand(\n      ['delegate', '--prompt', 'analyze context', '--folder', contextFolder, '--json'],\n      {\n        env: baseEnv,\n        cwd: workspace,\n      }\n    );\n\n    expectExitCode(result, 0);\n    const payload = parseJson(result.stdout);\n    expectJsonSchema(payload, delegateResponseSchema);\n  });\n\n  it('captures repository metadata from GitHub Actions environment variables', async () => {\n    const env = {\n      ...baseEnv,\n      GITHUB_REPOSITORY: 'octocat/hello-world',\n      GITHUB_REF: 'refs/heads/feature-branch',\n    };\n\n    const result = await runCliCommand(\n      ['delegate', '--prompt', 'repo context capture', '--json'],\n      {\n        env,\n        cwd: workspace,\n      }\n    );\n\n    expectExitCode(result, 0);\n    const payload = parseJson<{ id: string }>(result.stdout);\n\n    const storePath = join(agentHome, 'sessions.json');\n    const sessions = JSON.parse(readFileSync(storePath, 'utf8')) as Array<{ id: string; repository?: Record<string, unknown> }>;\n    const record = sessions.find((session) => session.id === payload.id);\n\n    expect(record?.repository).toBeDefined();\n    expect(record?.repository).toMatchObject({\n      provider: 'github',\n      owner: 'octocat',\n      repo: 'hello-world',\n      branch: 'feature-branch',\n    });\n  });\n});\n"]}