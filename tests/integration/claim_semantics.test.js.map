{"version":3,"file":"claim_semantics.test.js","sourceRoot":"","sources":["claim_semantics.test.ts"],"names":[],"mappings":"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","sourcesContent":["import { describe, expect, it } from 'vitest';\nimport { mkdtempSync, readFileSync, rmSync } from 'node:fs';\nimport { join } from 'node:path';\nimport { tmpdir } from 'node:os';\n\nimport { AssignmentService } from '../../src/services/assignment_service';\n\ndescribe('claim semantics', () => {\n  const makeArtifactsDir = () => mkdtempSync(join(tmpdir(), 'claim-service-'));\n\n  it('prevents duplicate claims for the same attempt', async () => {\n    const artifactsDir = makeArtifactsDir();\n    const service = new AssignmentService();\n\n    const first = await service.claimAttempt({\n      attemptId: 'attempt-setup-001',\n      workItemId: 'work-item-001-create-a-structured',\n      stepKey: 'phase-tests',\n      executor: { id: 'executor-alpha', displayName: 'Executor Alpha', runId: 'run-100' },\n      claimedAt: new Date('2025-09-19T16:40:00.000Z'),\n      artifactsDir,\n    });\n    expect(first.status).toBe('running');\n\n    await expect(\n      service.claimAttempt({\n        attemptId: 'attempt-setup-001',\n        workItemId: 'work-item-001-create-a-structured',\n        stepKey: 'phase-tests',\n        executor: { id: 'executor-beta', displayName: 'Executor Beta', runId: 'run-101' },\n        claimedAt: new Date('2025-09-19T16:41:00.000Z'),\n        artifactsDir,\n      }),\n    ).rejects.toThrow(/already claimed/i);\n\n    const claimPath = join(artifactsDir, 'claims', 'attempt-setup-001.json');\n    const persisted = JSON.parse(readFileSync(claimPath, 'utf-8'));\n    expect(persisted.executor.id).toBe('executor-alpha');\n\n    rmSync(artifactsDir, { recursive: true, force: true });\n  });\n\n  it('records retry attempts with linkage to previous attempt', async () => {\n    const artifactsDir = makeArtifactsDir();\n    const service = new AssignmentService();\n\n    await service.claimAttempt({\n      attemptId: 'attempt-setup-001',\n      workItemId: 'work-item-001-create-a-structured',\n      stepKey: 'phase-tests',\n      executor: { id: 'executor-alpha', displayName: 'Executor Alpha' },\n      claimedAt: new Date('2025-09-19T16:40:00.000Z'),\n      artifactsDir,\n    });\n\n    const retry = await service.claimAttempt({\n      attemptId: 'attempt-setup-002',\n      workItemId: 'work-item-001-create-a-structured',\n      stepKey: 'phase-tests',\n      executor: { id: 'executor-alpha', displayName: 'Executor Alpha' },\n      claimedAt: new Date('2025-09-19T16:45:00.000Z'),\n      artifactsDir,\n    });\n\n    expect(retry.previousAttemptId).toBe('attempt-setup-001');\n\n    rmSync(artifactsDir, { recursive: true, force: true });\n  });\n});\n"]}