{"version":3,"file":"handoff_artifact_flow.test.js","sourceRoot":"","sources":["handoff_artifact_flow.test.ts"],"names":[],"mappings":";;;;;AAAA,mCAA8C;AAC9C,qCAA4D;AAC5D,yCAAiC;AACjC,qCAAiC;AACjC,8CAAsB;AAEtB,0EAAsE;AAEtE,MAAM,UAAU,GAAG,IAAA,gBAAI,EACrB,OAAO,CAAC,GAAG,EAAE,EACb,OAAO,EACP,yBAAyB,EACzB,WAAW,EACX,8BAA8B,CAC/B,CAAC;AAEF,MAAM,GAAG,GAAG,IAAI,aAAG,CAAC,EAAE,SAAS,EAAE,IAAI,EAAE,MAAM,EAAE,KAAK,EAAE,CAAC,CAAC;AACxD,MAAM,MAAM,GAAG,IAAI,CAAC,KAAK,CAAC,IAAA,sBAAY,EAAC,UAAU,EAAE,OAAO,CAAC,CAAC,CAAC;AAC7D,MAAM,QAAQ,GAAG,GAAG,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;AAErC,IAAA,iBAAQ,EAAC,uBAAuB,EAAE,GAAG,EAAE;IACrC,IAAA,WAAE,EAAC,gEAAgE,EAAE,KAAK,IAAI,EAAE;QAC9E,MAAM,YAAY,GAAG,IAAA,qBAAW,EAAC,IAAA,gBAAI,EAAC,IAAA,gBAAM,GAAE,EAAE,kBAAkB,CAAC,CAAC,CAAC;QACrE,MAAM,OAAO,GAAG,IAAI,kCAAe,CAAC,EAAE,YAAY,EAAE,UAAU,EAAE,CAAC,CAAC;QAElE,MAAM,MAAM,GAAG,MAAM,OAAO,CAAC,oBAAoB,CAAC;YAChD,UAAU,EAAE,mCAAmC;YAC/C,QAAQ,EAAE,EAAE,IAAI,EAAE,0CAA0C,EAAE,OAAO,EAAE,OAAO,EAAE;YAChF,IAAI,EAAE,EAAE,GAAG,EAAE,aAAa,EAAE,KAAK,EAAE,CAAC,EAAE;YACtC,SAAS,EAAE,mBAAmB;YAC9B,SAAS,EAAE,yBAAyB;YACpC,KAAK,EAAE,kBAAkB;YACzB,OAAO,EAAE,+BAA+B;YACxC,UAAU,EAAE,4BAA4B;YACxC,mBAAmB,EAAE,KAAK;YAC1B,KAAK,EAAE,CAAC,+CAA+C,CAAC;YACxD,SAAS,EAAE,IAAI,IAAI,CAAC,0BAA0B,CAAC;SAChD,CAAC,CAAC;QAEH,MAAM,GAAG,GAAG,IAAI,CAAC,KAAK,CAAC,IAAA,sBAAY,EAAC,MAAM,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC,CAAC;QAC3D,MAAM,KAAK,GAAG,QAAQ,CAAC,GAAG,CAAC,CAAC;QAC5B,IAAA,eAAM,EAAC,KAAK,EAAE,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,MAAM,EAAE,IAAI,EAAE,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QAEnE,MAAM,SAAS,GAAG,MAAM,OAAO,CAAC,oBAAoB,CAAC,mCAAmC,CAAC,CAAC;QAC1F,IAAA,eAAM,EAAC,SAAS,CAAC,GAAG,CAAC,CAAC,QAAQ,EAAE,EAAE,CAAC,QAAQ,CAAC,SAAS,CAAC,CAAC,CAAC,SAAS,CAAC,yBAAyB,CAAC,CAAC;QAE7F,IAAA,gBAAM,EAAC,YAAY,EAAE,EAAE,SAAS,EAAE,IAAI,EAAE,KAAK,EAAE,IAAI,EAAE,CAAC,CAAC;IACzD,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["import { describe, expect, it } from 'vitest';\nimport { mkdtempSync, readFileSync, rmSync } from 'node:fs';\nimport { join } from 'node:path';\nimport { tmpdir } from 'node:os';\nimport Ajv from 'ajv';\n\nimport { ArtifactService } from '../../src/services/artifact_service';\n\nconst schemaPath = join(\n  process.cwd(),\n  'specs',\n  '001-create-a-structured',\n  'contracts',\n  'handoff-artifact.schema.json',\n);\n\nconst ajv = new Ajv({ allErrors: true, strict: false });\nconst schema = JSON.parse(readFileSync(schemaPath, 'utf-8'));\nconst validate = ajv.compile(schema);\n\ndescribe('handoff artifact flow', () => {\n  it('writes schema-compliant artifacts and lists them for consumers', async () => {\n    const artifactsDir = mkdtempSync(join(tmpdir(), 'handoff-service-'));\n    const service = new ArtifactService({ artifactsDir, schemaPath });\n\n    const record = await service.writeHandoffArtifact({\n      workItemId: 'work-item-001-create-a-structured',\n      workflow: { name: 'Implement Plan-to-Execution Orchestrator', version: '1.0.0' },\n      step: { key: 'phase-tests', order: 2 },\n      eventType: 'attempt-completed',\n      attemptId: 'attempt-phase-tests-001',\n      actor: 'quality-engineer',\n      outcome: 'Tests authored and committed.',\n      nextAction: 'Run models implementation.',\n      baselineIntegration: 'pre',\n      links: ['artifacts/claims/attempt-phase-tests-001.json'],\n      timestamp: new Date('2025-09-19T17:00:00.000Z'),\n    });\n\n    const raw = JSON.parse(readFileSync(record.path, 'utf-8'));\n    const valid = validate(raw);\n    expect(valid, JSON.stringify(validate.errors, null, 2)).toBe(true);\n\n    const artifacts = await service.listHandoffArtifacts('work-item-001-create-a-structured');\n    expect(artifacts.map((artifact) => artifact.attemptId)).toContain('attempt-phase-tests-001');\n\n    rmSync(artifactsDir, { recursive: true, force: true });\n  });\n});\n"]}