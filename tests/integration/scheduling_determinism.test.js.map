{"version":3,"file":"scheduling_determinism.test.js","sourceRoot":"","sources":["scheduling_determinism.test.ts"],"names":[],"mappings":";;;;;AAAA,mCAA8C;AAC9C,qCAAuC;AACvC,yCAAoC;AACpC,gDAAwB;AAExB,8EAA0E;AAE1E,MAAM,YAAY,GAAG,IAAA,mBAAO,EAC1B,SAAS,EACT,IAAI,EACJ,IAAI,EACJ,WAAW,EACX,WAAW,EACX,iCAAiC,CAClC,CAAC;AAEF,MAAM,YAAY,GAAG,IAAA,mBAAO,EAC1B,SAAS,EACT,IAAI,EACJ,IAAI,EACJ,WAAW,EACX,YAAY,EACZ,wCAAwC,CACzC,CAAC;AAEF,MAAM,YAAY,GAAG,IAAA,mBAAO,EAC1B,SAAS,EACT,IAAI,EACJ,IAAI,EACJ,WAAW,EACX,UAAU,EACV,wCAAwC,CACzC,CAAC;AAEF,IAAA,iBAAQ,EAAC,wBAAwB,EAAE,GAAG,EAAE;IACtC,IAAA,WAAE,EAAC,8DAA8D,EAAE,KAAK,IAAI,EAAE;QAC5E,MAAM,WAAW,GAAG,cAAI,CAAC,KAAK,CAAC,IAAA,sBAAY,EAAC,YAAY,EAAE,OAAO,CAAC,CAAC,CAAC;QACpE,MAAM,QAAQ,GAAG,IAAI,CAAC,KAAK,CAAC,IAAA,sBAAY,EAAC,YAAY,EAAE,OAAO,CAAC,CAAC,CAAC;QACjE,MAAM,QAAQ,GAAG,IAAI,CAAC,KAAK,CAAC,IAAA,sBAAY,EAAC,YAAY,EAAE,OAAO,CAAC,CAAC,CAAC;QAEjE,MAAM,OAAO,GAAG,IAAI,sCAAiB,EAAE,CAAC;QACxC,MAAM,QAAQ,GAAG,MAAM,OAAO,CAAC,gBAAgB,CAAC;YAC9C,QAAQ,EAAE,WAAW;YACrB,QAAQ;YACR,cAAc,EAAE,CAAC,aAAa,CAAC;YAC/B,GAAG,EAAE,IAAI,IAAI,CAAC,0BAA0B,CAAC;SAC1C,CAAC,CAAC;QAEH,IAAA,eAAM,EAAC,QAAQ,CAAC,UAAU,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC;QAC9C,IAAA,eAAM,EAAC,QAAQ,CAAC,WAAW,CAAC,CAAC,OAAO,CAAC,QAAQ,CAAC,WAAW,CAAC,CAAC;QAC3D,IAAA,eAAM,EAAC,QAAQ,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC,IAAI,EAAE,EAAE,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,aAAa,CAAC,CAAC,CAAC;QAC7E,IAAA,eAAM,EAAC,QAAQ,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC,IAAI,EAAE,EAAE,CAAC,IAAI,CAAC,GAAG,KAAK,cAAc,CAAC,EAAE,SAAS,CAAC,CAAC,SAAS,CAC5F,aAAa,CACd,CAAC;IACJ,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["import { describe, expect, it } from 'vitest';\nimport { readFileSync } from 'node:fs';\nimport { resolve } from 'node:path';\nimport YAML from 'yaml';\n\nimport { SchedulingService } from '../../src/services/scheduling_service';\n\nconst workflowPath = resolve(\n  __dirname,\n  '..',\n  '..',\n  'artifacts',\n  'workflows',\n  'wf-001-create-a-structured.yaml',\n);\n\nconst workItemPath = resolve(\n  __dirname,\n  '..',\n  '..',\n  'artifacts',\n  'work-items',\n  'work-item-001-create-a-structured.json',\n);\n\nconst schedulePath = resolve(\n  __dirname,\n  '..',\n  '..',\n  'artifacts',\n  'schedule',\n  'work-item-001-create-a-structured.json',\n);\n\ndescribe('scheduling determinism', () => {\n  it('orders ready steps deterministically with lexical tie-breaks', async () => {\n    const workflowDef = YAML.parse(readFileSync(workflowPath, 'utf-8'));\n    const workItem = JSON.parse(readFileSync(workItemPath, 'utf-8'));\n    const expected = JSON.parse(readFileSync(schedulePath, 'utf-8'));\n\n    const service = new SchedulingService();\n    const decision = await service.generateSchedule({\n      workflow: workflowDef,\n      workItem,\n      completedSteps: ['phase-setup'],\n      now: new Date('2025-09-19T16:30:00.000Z'),\n    });\n\n    expect(decision.workItemId).toBe(workItem.id);\n    expect(decision.launchOrder).toEqual(expected.launchOrder);\n    expect(decision.readySteps.map((step) => step.key)).toEqual(['phase-tests']);\n    expect(decision.blockedSteps.find((step) => step.key === 'phase-models')?.blockedBy).toContain(\n      'phase-tests',\n    );\n  });\n});\n"]}