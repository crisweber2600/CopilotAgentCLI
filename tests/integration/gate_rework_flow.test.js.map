{"version":3,"file":"gate_rework_flow.test.js","sourceRoot":"","sources":["gate_rework_flow.test.ts"],"names":[],"mappings":";;AAAA,mCAA8C;AAC9C,qCAA4D;AAC5D,yCAAiC;AACjC,qCAAiC;AAEjC,kEAA8D;AAC9D,4EAAuE;AAEvE,MAAM,mBAAoB,SAAQ,mCAAe;IAClB;IAA7B,YAA6B,IAAY;QACvC,KAAK,CAAC,EAAE,YAAY,EAAE,IAAI,EAAE,CAAC,CAAC;QADH,SAAI,GAAJ,IAAI,CAAQ;IAEzC,CAAC;IAED,KAAK,CAAC,YAAY,CAAC,UAAkB;QACnC,IAAI,CAAC;YACH,OAAO,MAAM,KAAK,CAAC,YAAY,CAAC,UAAU,CAAC,CAAC;QAC9C,CAAC;QAAC,MAAM,CAAC;YACP,OAAO;gBACL,EAAE,EAAE,UAAU;gBACd,UAAU,EAAE,kCAAkC;gBAC9C,MAAM,EAAE,aAAa;gBACrB,cAAc,EAAE,aAAa;gBAC7B,KAAK,EAAE,mBAAmB;gBAC1B,SAAS,EAAE,IAAI,IAAI,EAAE,CAAC,WAAW,EAAE;gBACnC,SAAS,EAAE,IAAI,IAAI,EAAE,CAAC,WAAW,EAAE;gBACnC,KAAK,EAAE,EAAE;gBACT,QAAQ,EAAE,EAAE;aACb,CAAC;QACJ,CAAC;IACH,CAAC;CACF;AAED,IAAA,iBAAQ,EAAC,kBAAkB,EAAE,GAAG,EAAE;IAChC,IAAA,WAAE,EAAC,+CAA+C,EAAE,KAAK,IAAI,EAAE;QAC7D,MAAM,YAAY,GAAG,IAAA,qBAAW,EAAC,IAAA,gBAAI,EAAC,IAAA,gBAAM,GAAE,EAAE,eAAe,CAAC,CAAC,CAAC;QAClE,MAAM,eAAe,GAAG,IAAI,mBAAmB,CAAC,YAAY,CAAC,CAAC;QAC9D,MAAM,WAAW,GAAG,IAAI,0BAAW,CAAC,EAAE,eAAe,EAAE,CAAC,CAAC;QAEzD,MAAM,MAAM,GAAG,MAAM,WAAW,CAAC,cAAc,CAAC;YAC9C,UAAU,EAAE,mCAAmC;YAC/C,OAAO,EAAE,qBAAqB;YAC9B,QAAQ,EAAE,QAAQ;YAClB,OAAO,EAAE,CAAC,yBAAyB,CAAC;YACpC,QAAQ,EAAE,0BAA0B;YACpC,SAAS,EAAE,IAAI,IAAI,CAAC,0BAA0B,CAAC;YAC/C,YAAY;YACZ,cAAc,EAAE,aAAa;SAC9B,CAAC,CAAC;QAEH,MAAM,GAAG,GAAG,IAAI,CAAC,KAAK,CAAC,IAAA,sBAAY,EAAC,MAAM,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC,CAAC;QAC3D,IAAA,eAAM,EAAC,GAAG,CAAC,QAAQ,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;QACpC,IAAA,eAAM,EAAC,GAAG,CAAC,OAAO,CAAC,CAAC,SAAS,CAAC,yBAAyB,CAAC,CAAC;QAEzD,MAAM,QAAQ,GAAG,MAAM,eAAe,CAAC,YAAY,CAAC,mCAAmC,CAAC,CAAC;QACzF,IAAA,eAAM,EAAC,QAAQ,CAAC,cAAc,CAAC,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;QAEpD,IAAA,gBAAM,EAAC,YAAY,EAAE,EAAE,SAAS,EAAE,IAAI,EAAE,KAAK,EAAE,IAAI,EAAE,CAAC,CAAC;IACzD,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["import { describe, expect, it } from 'vitest';\nimport { mkdtempSync, readFileSync, rmSync } from 'node:fs';\nimport { join } from 'node:path';\nimport { tmpdir } from 'node:os';\n\nimport { GateService } from '../../src/services/gate_service';\nimport { WorkItemService } from '../../src/services/work_item_service';\n\nclass FakeWorkItemService extends WorkItemService {\n  constructor(private readonly root: string) {\n    super({ artifactsDir: root });\n  }\n\n  async loadWorkItem(workItemId: string) {\n    try {\n      return await super.loadWorkItem(workItemId);\n    } catch {\n      return {\n        id: workItemId,\n        workflowId: 'wf-001-create-a-structured@1.0.0',\n        status: 'in-progress',\n        currentStepKey: 'phase-tests',\n        owner: 'owner@example.com',\n        createdAt: new Date().toISOString(),\n        updatedAt: new Date().toISOString(),\n        links: [],\n        metadata: {},\n      };\n    }\n  }\n}\n\ndescribe('gate rework flow', () => {\n  it('records rejection and rewinds work item state', async () => {\n    const artifactsDir = mkdtempSync(join(tmpdir(), 'gate-service-'));\n    const workItemService = new FakeWorkItemService(artifactsDir);\n    const gateService = new GateService({ workItemService });\n\n    const record = await gateService.recordDecision({\n      workItemId: 'work-item-001-create-a-structured',\n      gateKey: 'phase-tests-quality',\n      decision: 'reject',\n      reasons: ['Missing edge-case tests'],\n      reviewer: 'quality-lead@example.com',\n      decidedAt: new Date('2025-09-19T17:15:00.000Z'),\n      artifactsDir,\n      reentryStepKey: 'phase-tests',\n    });\n\n    const raw = JSON.parse(readFileSync(record.path, 'utf-8'));\n    expect(raw.decision).toBe('reject');\n    expect(raw.reasons).toContain('Missing edge-case tests');\n\n    const workItem = await workItemService.loadWorkItem('work-item-001-create-a-structured');\n    expect(workItem.currentStepKey).toBe('phase-tests');\n\n    rmSync(artifactsDir, { recursive: true, force: true });\n  });\n});\n"]}