{"version":3,"file":"scheduling_perf.test.js","sourceRoot":"","sources":["scheduling_perf.test.ts"],"names":[],"mappings":";;AAAA,mCAA8C;AAE9C,8EAA0E;AAE1E,SAAS,aAAa,CAAC,IAAY;IACjC,OAAO;QACL,EAAE,EAAE,gBAAgB;QACpB,IAAI,EAAE,sBAAsB;QAC5B,OAAO,EAAE,OAAO;QAChB,KAAK,EAAE,KAAK,CAAC,IAAI,CAAC,EAAE,MAAM,EAAE,IAAI,EAAE,EAAE,CAAC,CAAC,EAAE,KAAK,EAAE,EAAE,CAAC,CAAC;YACjD,GAAG,EAAE,QAAQ,KAAK,GAAG,CAAC,EAAE;YACxB,KAAK,EAAE,KAAK,GAAG,CAAC;YAChB,cAAc,EAAE,KAAK;YACrB,aAAa,EAAE,KAAK,KAAK,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,QAAQ,KAAK,EAAE,CAAC;YACnD,YAAY,EAAE,CAAC,MAAM,CAAC;YACtB,eAAe,EAAE,UAAU;SAC5B,CAAC,CAAC;KACJ,CAAC;AACJ,CAAC;AAED,IAAA,iBAAQ,EAAC,wBAAwB,EAAE,GAAG,EAAE;IACtC,IAAA,WAAE,EAAC,8CAA8C,EAAE,KAAK,IAAI,EAAE;QAC5D,MAAM,QAAQ,GAAG,aAAa,CAAC,GAAG,CAAC,CAAC;QACpC,MAAM,OAAO,GAAG,IAAI,sCAAiB,EAAE,CAAC;QAExC,MAAM,KAAK,GAAG,WAAW,CAAC,GAAG,EAAE,CAAC;QAChC,MAAM,QAAQ,GAAG,MAAM,OAAO,CAAC,gBAAgB,CAAC;YAC9C,QAAQ;YACR,QAAQ,EAAE,EAAE,EAAE,EAAE,WAAW,EAAE,cAAc,EAAE,QAAQ,EAAE;YACvD,cAAc,EAAE,CAAC,QAAQ,CAAC;SAC3B,CAAC,CAAC;QACH,MAAM,QAAQ,GAAG,WAAW,CAAC,GAAG,EAAE,GAAG,KAAK,CAAC;QAE3C,IAAA,eAAM,EAAC,QAAQ,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;QAC3C,IAAA,eAAM,EAAC,QAAQ,CAAC,CAAC,YAAY,CAAC,GAAG,CAAC,CAAC;IACrC,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["import { describe, expect, it } from 'vitest';\n\nimport { SchedulingService } from '../../src/services/scheduling_service';\n\nfunction buildWorkflow(size: number) {\n  return {\n    id: 'wf-performance',\n    name: 'Performance Workflow',\n    version: '1.0.0',\n    steps: Array.from({ length: size }, (_, index) => ({\n      key: `step-${index + 1}`,\n      order: index + 1,\n      parallelizable: false,\n      entryCriteria: index === 0 ? [] : [`step-${index}`],\n      exitCriteria: ['done'],\n      responsibleRole: 'executor',\n    })),\n  };\n}\n\ndescribe('scheduling performance', () => {\n  it('handles large workflows within expected time', async () => {\n    const workflow = buildWorkflow(500);\n    const service = new SchedulingService();\n\n    const start = performance.now();\n    const decision = await service.generateSchedule({\n      workflow,\n      workItem: { id: 'perf-item', currentStepKey: 'step-1' },\n      completedSteps: ['step-1'],\n    });\n    const duration = performance.now() - start;\n\n    expect(decision.readySteps.length).toBe(1);\n    expect(duration).toBeLessThan(250);\n  });\n});\n"]}