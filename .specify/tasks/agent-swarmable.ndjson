{"id":"T001","name":"Define machine schema + wiring","description":"Create JSON Schema for NDJSON task specifications and YAML schema for DAG structure. Establish validation rules for task IDs, dependencies, and metadata fields. Place schemas under .specify/ directory with clear documentation.","requires":[],"parallel_group":"bootstrap","inputs":[],"outputs":[".specify/schema/task.ndjson.schema.json",".specify/graph/task_graph.yaml"],"branch":"feat/agent-swarmable__T001","base_branch":"feat/agent-swarmable","claim":{"status":"done","by":null,"since":"2025-09-19T00:00:00Z","lease_minutes":90,"heartbeat_minutes":10},"concurrency_key":"agent-swarmable::T001","retry_policy":{"max_retries":2,"backoff":"exponential","base_seconds":20},"done_when":["schemas validate against examples","YAML parses correctly","lint passes"],"pr":{"title":"[T001] Define machine schema + wiring","base":"feat/agent-swarmable","head":"feat/agent-swarmable__T001","labels":["auto:swarm","task","T001"],"draft":false}}
{"id":"T002","name":"Create TypeScript task interfaces","description":"Define TypeScript interfaces for task specifications, claim objects, retry policies, and PR metadata. Ensure type safety for all agent contract interactions and provide proper exports for CLI integration.","requires":["T001"],"parallel_group":"interfaces","inputs":[".specify/schema/task.ndjson.schema.json"],"outputs":["src/models/taskSpec.ts","src/types/agentContract.ts"],"branch":"feat/agent-swarmable__T002","base_branch":"feat/agent-swarmable","claim":{"status":"done","by":null,"since":"2025-09-19T00:00:00Z","lease_minutes":90,"heartbeat_minutes":10},"concurrency_key":"agent-swarmable::T002","retry_policy":{"max_retries":2,"backoff":"exponential","base_seconds":20},"done_when":["TypeScript compiles without errors","interfaces match JSON schema","exports are properly defined"],"pr":{"title":"[T002] Create TypeScript task interfaces","base":"feat/agent-swarmable","head":"feat/agent-swarmable__T002","labels":["auto:swarm","task","T002"],"draft":false}}
{"id":"T003","name":"Setup .specify directory structure","description":"Create and configure .specify directory structure for spec-kit compatibility. Include agent configuration, task templates, and automation scripts directory with proper permissions and documentation.","requires":["T001"],"parallel_group":"bootstrap","inputs":[".specify/schema/task.ndjson.schema.json"],"outputs":[".specify/config/agent_config.yaml",".specify/templates/task_template.ndjson",".specify/scripts/"],"branch":"feat/agent-swarmable__T003","base_branch":"feat/agent-swarmable","claim":{"status":"done","by":null,"since":"2025-09-19T00:00:00Z","lease_minutes":90,"heartbeat_minutes":10},"concurrency_key":"agent-swarmable::T003","retry_policy":{"max_retries":2,"backoff":"exponential","base_seconds":20},"done_when":["directory structure created","config validates","templates are usable"],"pr":{"title":"[T003] Setup .specify directory structure","base":"feat/agent-swarmable","head":"feat/agent-swarmable__T003","labels":["auto:swarm","task","T003"],"draft":false}}
{"id":"T004","name":"Create task parser service","description":"Build NDJSON task parser service with schema validation and TypeScript integration. Handle streaming input, provide utilities for task filtering and querying, and support dependency resolution.","requires":["T002","T003"],"parallel_group":"services","inputs":["src/models/taskSpec.ts",".specify/templates/task_template.ndjson"],"outputs":["src/services/taskParser.ts","src/utils/ndjsonReader.ts"],"branch":"feat/agent-swarmable__T004","base_branch":"feat/agent-swarmable","claim":{"status":"done","by":null,"since":"2025-09-19T00:00:00Z","lease_minutes":90,"heartbeat_minutes":10},"concurrency_key":"agent-swarmable::T004","retry_policy":{"max_retries":2,"backoff":"exponential","base_seconds":20},"done_when":["NDJSON parsing works","schema validation integrated","dependency resolution functional"],"pr":{"title":"[T004] Create task parser service","base":"feat/agent-swarmable","head":"feat/agent-swarmable__T004","labels":["auto:swarm","task","T004"],"draft":false}}
{"id":"T005","name":"Agent contract implementation","description":"Implement the agent contract service that enforces claiming rules, heartbeat requirements, and task lifecycle management. Create comprehensive claim management with lease/heartbeat mechanisms.","requires":["T004"],"parallel_group":"services","inputs":["src/services/taskParser.ts","src/types/agentContract.ts"],"outputs":["src/services/agentContract.ts"],"branch":"feat/agent-swarmable__T005","base_branch":"feat/agent-swarmable","claim":{"status":"done","by":null,"since":"2025-09-19T00:00:00Z","lease_minutes":90,"heartbeat_minutes":10},"concurrency_key":"agent-swarmable::T005","retry_policy":{"max_retries":2,"backoff":"exponential","base_seconds":20},"done_when":["contract rules enforced","heartbeat monitoring works","claim management functional"],"pr":{"title":"[T005] Agent contract implementation","base":"feat/agent-swarmable","head":"feat/agent-swarmable__T005","labels":["auto:swarm","task","T005"],"draft":false}}
{"id":"T006","name":"CLI integration commands","description":"Add CLI commands for task claiming (claim), releasing (release), and status checking (task-status). Integrate with existing CLI architecture and authentication system.","requires":["T005"],"parallel_group":"cli","inputs":["src/services/agentContract.ts"],"outputs":["src/cli/commands/claim.ts","src/cli/commands/release.ts","src/cli/commands/task-status.ts"],"branch":"feat/agent-swarmable__T006","base_branch":"feat/agent-swarmable","claim":{"status":"done","by":null,"since":"2025-09-19T00:00:00Z","lease_minutes":90,"heartbeat_minutes":10},"concurrency_key":"agent-swarmable::T006","retry_policy":{"max_retries":2,"backoff":"exponential","base_seconds":20},"done_when":["CLI commands work","integration tests pass","help documentation updated"],"pr":{"title":"[T006] CLI integration commands","base":"feat/agent-swarmable","head":"feat/agent-swarmable__T006","labels":["auto:swarm","task","T006"],"draft":false}}
{"id":"T007","name":"Documentation and examples","description":"Create comprehensive documentation for the swarm framework including usage examples, sample task specifications, and best practices. Provide complete examples that demonstrate both CLI workflows.","requires":["T006"],"parallel_group":"documentation","inputs":["src/cli/commands/"],"outputs":["docs/swarm_framework.md","examples/sample_tasks.ndjson"],"branch":"feat/agent-swarmable__T007","base_branch":"feat/agent-swarmable","claim":{"status":"done","by":null,"since":"2025-09-19T00:00:00Z","lease_minutes":90,"heartbeat_minutes":10},"concurrency_key":"agent-swarmable::T007","retry_policy":{"max_retries":2,"backoff":"exponential","base_seconds":20},"done_when":["documentation complete","examples validate","usage guide comprehensive"],"pr":{"title":"[T007] Documentation and examples","base":"feat/agent-swarmable","head":"feat/agent-swarmable__T007","labels":["auto:swarm","task","T007"],"draft":false}}